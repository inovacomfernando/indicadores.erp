"""
Componentes de alertas e notifica√ß√µes com an√°lise din√¢mica
"""
import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats

def analyze_trend(series):
    """
    Analisa a tend√™ncia de uma s√©rie temporal
    Retorna: (tendencia, percentual_variacao, valor_inicial, valor_final)
    """
    # Remove zeros e valores nulos
    clean_series = series[series > 0].dropna()
    
    if len(clean_series) < 2:
        return None, 0, 0, 0
    
    valor_inicial = clean_series.iloc[0]
    valor_final = clean_series.iloc[-1]
    
    # Calcula varia√ß√£o percentual
    if valor_inicial > 0:
        percentual = ((valor_final - valor_inicial) / valor_inicial) * 100
    else:
        percentual = 0
    
    # Determina tend√™ncia
    if percentual > 5:
        tendencia = "crescente"
    elif percentual < -5:
        tendencia = "queda"
    else:
        tendencia = "est√°vel"
    
    return tendencia, percentual, valor_inicial, valor_final

def calculate_metrics_health(df):
    """
    Calcula a sa√∫de geral das m√©tricas e identifica pontos de aten√ß√£o
    """
    # Filtra apenas meses com dados (remove zeros)
    df_valid = df[df['Sess√µes'] > 0].copy()
    
    if len(df_valid) < 2:
        return []
    
    alerts = []
    
    # 1. An√°lise de CAC
    cac_trend, cac_var, cac_inicial, cac_final = analyze_trend(df_valid['CAC'])
    if cac_trend == "crescente" and abs(cac_var) > 10:
        alerts.append({
            'icon': 'üìà',
            'title': 'CAC crescente',
            'message': f'Aumentou {abs(cac_var):.1f}% no per√≠odo (R$ {cac_inicial:.0f} ‚Üí R$ {cac_final:.0f})',
            'severity': 'high'
        })
    
    # 2. An√°lise de ROI
    roi_trend, roi_var, roi_inicial, roi_final = analyze_trend(df_valid['ROI (%)'])
    if roi_trend == "queda" and abs(roi_var) > 15:
        alerts.append({
            'icon': 'üìâ',
            'title': 'ROI em queda',
            'message': f'Redu√ß√£o de {abs(roi_var):.1f}% no per√≠odo ({roi_inicial:.0f}% ‚Üí {roi_final:.0f}%)',
            'severity': 'high'
        })
    
    # 3. An√°lise de CAC:LTV
    cac_ltv_trend, cac_ltv_var, cac_ltv_inicial, cac_ltv_final = analyze_trend(df_valid['CAC:LTV'])
    if cac_ltv_trend == "queda" and abs(cac_ltv_var) > 10:
        alerts.append({
            'icon': '‚ö†Ô∏è',
            'title': 'Rela√ß√£o CAC:LTV em decl√≠nio',
            'message': f'Caiu de {cac_ltv_inicial:.1f}:1 para {cac_ltv_final:.1f}:1',
            'severity': 'medium'
        })
    elif cac_ltv_final < 3:
        alerts.append({
            'icon': 'üö®',
            'title': 'CAC:LTV abaixo do ideal',
            'message': f'Rela√ß√£o atual: {cac_ltv_final:.1f}:1 (ideal: >3:1)',
            'severity': 'high'
        })
    
    # 4. An√°lise de Taxa de Convers√£o de Leads
    tc_leads_trend, tc_leads_var, tc_leads_inicial, tc_leads_final = analyze_trend(df_valid['TC Leads (%)'])
    if tc_leads_trend == "queda" and abs(tc_leads_var) > 15:
        alerts.append({
            'icon': 'üìä',
            'title': 'TC Leads em queda',
            'message': f'Tend√™ncia de queda ({tc_leads_inicial:.2f}% ‚Üí {tc_leads_final:.2f}%)',
            'severity': 'medium'
        })
    elif tc_leads_final < 3:
        alerts.append({
            'icon': '‚ö°',
            'title': 'TC Leads baixa',
            'message': f'Taxa atual: {tc_leads_final:.2f}% (aten√ß√£o ao funil de convers√£o)',
            'severity': 'medium'
        })
    
    # 5. An√°lise de Taxa de Convers√£o de Usu√°rios
    tc_users_trend, tc_users_var, tc_users_inicial, tc_users_final = analyze_trend(df_valid['TC Usu√°rios (%)'])
    if tc_users_trend == "queda" and abs(tc_users_var) > 15:
        alerts.append({
            'icon': 'üë•',
            'title': 'TC Usu√°rios em decl√≠nio',
            'message': f'Redu√ß√£o de {abs(tc_users_var):.1f}% ({tc_users_inicial:.2f}% ‚Üí {tc_users_final:.2f}%)',
            'severity': 'medium'
        })
    
    # 6. An√°lise de Custo Total
    custo_trend, custo_var, custo_inicial, custo_final = analyze_trend(df_valid['Total Ads'])
    if custo_trend == "crescente" and abs(custo_var) > 30:
        alerts.append({
            'icon': 'üí∞',
            'title': 'Custo de Ads crescendo rapidamente',
            'message': f'Aumento de {abs(custo_var):.1f}% (R$ {custo_inicial:.0f} ‚Üí R$ {custo_final:.0f})',
            'severity': 'medium'
        })
    
    # 7. An√°lise de Receita vs Custo
    if len(df_valid) > 0:
        df_valid['Margem'] = ((df_valid['Receita Web'] - df_valid['Total Ads']) / df_valid['Receita Web'] * 100)
        margem_media = df_valid['Margem'].mean()
        
        if margem_media < 20:
            alerts.append({
                'icon': 'üí∏',
                'title': 'Margem de lucro apertada',
                'message': f'Margem m√©dia: {margem_media:.1f}% (custo ads vs receita)',
                'severity': 'high'
            })
    
    # 8. An√°lise de Ticket M√©dio
    ticket_trend, ticket_var, ticket_inicial, ticket_final = analyze_trend(df_valid['Ticket M√©dio'])
    if ticket_trend == "queda" and abs(ticket_var) > 10:
        alerts.append({
            'icon': 'üé´',
            'title': 'Ticket M√©dio em queda',
            'message': f'Redu√ß√£o de {abs(ticket_var):.1f}% (R$ {ticket_inicial:.2f} ‚Üí R$ {ticket_final:.2f})',
            'severity': 'low'
        })
    
    return alerts

def render_main_alerts(df):
    """
    Renderiza os alertas principais baseados nos dados reais
    Args:
        df: DataFrame com os dados do loader
    """
    alerts = calculate_metrics_health(df)
    
    if not alerts:
        st.markdown("""
        <div class="alert-box" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-left: 5px solid #4CAF50;">
            <h4>‚úÖ M√©tricas Saud√°veis</h4>
            <p>Nenhum ponto cr√≠tico de aten√ß√£o identificado no momento.</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Separa alertas por severidade
    high_alerts = [a for a in alerts if a['severity'] == 'high']
    medium_alerts = [a for a in alerts if a['severity'] == 'medium']
    low_alerts = [a for a in alerts if a['severity'] == 'low']
    
    # Renderiza alertas de alta severidade
    if high_alerts:
        alerts_html = "<ul>"
        for alert in high_alerts:
            alerts_html += f"<li><strong>{alert['title']}:</strong> {alert['message']}</li>"
        alerts_html += "</ul>"
        
        st.markdown(f"""
        <div class="alert-box" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-left: 5px solid #f44336;">
            <h4>üö® Pontos Cr√≠ticos de Aten√ß√£o</h4>
            {alerts_html}
        </div>
        """, unsafe_allow_html=True)
    
    # Renderiza alertas de m√©dia severidade
    if medium_alerts:
        alerts_html = "<ul>"
        for alert in medium_alerts:
            alerts_html += f"<li><strong>{alert['title']}:</strong> {alert['message']}</li>"
        alerts_html += "</ul>"
        
        st.markdown(f"""
        <div class="alert-box" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-left: 5px solid #ff9800;">
            <h4>‚ö†Ô∏è Pontos de Monitoramento</h4>
            {alerts_html}
        </div>
        """, unsafe_allow_html=True)
    
    # Renderiza alertas de baixa severidade (se houver)
    if low_alerts:
        alerts_html = "<ul>"
        for alert in low_alerts:
            alerts_html += f"<li><strong>{alert['title']}:</strong> {alert['message']}</li>"
        alerts_html += "</ul>"
        
        st.markdown(f"""
        <div class="alert-box" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-left: 5px solid #2196F3;">
            <h4>‚ÑπÔ∏è Observa√ß√µes</h4>
            {alerts_html}
        </div>
        """, unsafe_allow_html=True)

def render_insights(df):
    """
    Renderiza insights adicionais e recomenda√ß√µes
    """
    df_valid = df[df['Sess√µes'] > 0].copy()
    
    if len(df_valid) < 2:
        return
    
    insights = []
    
    # Insight sobre melhor performance
    best_roi_idx = df_valid['ROI (%)'].idxmax()
    best_month = df_valid.loc[best_roi_idx, 'M√™s']
    best_roi = df_valid.loc[best_roi_idx, 'ROI (%)']
    
    insights.append(f"**Melhor ROI:** {best_month} com {best_roi:.1f}%")
    
    # Insight sobre efici√™ncia de convers√£o
    best_tc_idx = df_valid['TC Leads (%)'].idxmax()
    best_tc_month = df_valid.loc[best_tc_idx, 'M√™s']
    best_tc = df_valid.loc[best_tc_idx, 'TC Leads (%)']
    
    insights.append(f"**Melhor TC Leads:** {best_tc_month} com {best_tc:.2f}%")
    
    # Insight sobre crescimento de receita
    receita_trend, receita_var, _, _ = analyze_trend(df_valid['Receita Web'])
    if receita_trend == "crescente":
        insights.append(f"**Receita Web:** Crescimento de {abs(receita_var):.1f}% no per√≠odo ‚úÖ")
    
    if insights:
        st.markdown("### üí° Insights Positivos")
        for insight in insights:
            st.markdown(f"- {insight}")
