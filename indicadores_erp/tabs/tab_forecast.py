"""
Tab 6: Forecast e An√°lise Preditiva
"""
import streamlit as st
import pandas as pd
import plotly.express as px
from utils.forecast import (
    prever_cenarios,
    avaliar_qualidade_previsao,
    interpretar_tendencia
)
from utils.charts import criar_grafico_projecao


def render_tab_forecast(df):
    """
    Renderiza a tab de forecast
    
    Args:
        df: DataFrame completo (n√£o filtrado)
    """
    st.subheader("üîÆ Forecast: Cen√°rios para Proje√ß√£o e Estrat√©gia")
    
    try:
        # Prepara√ß√£o dos dados
        meses = df['M√™s'].tolist()
        previsao_meses = ["Out/25", "Nov/25", "Dez/25"]
        
        # KPIs para previs√£o
        kpis = ["Leads", "Clientes Web", "Receita Web", "CAC", "LTV", "ROI (%)"]
        
        # Calcular previs√µes
        resultados = {}
        for kpi in kpis:
            resultados[kpi] = prever_cenarios(df, kpi, num_previsoes=len(previsao_meses))
        
        # Exibir resultados
        st.markdown("### Previs√µes com Valida√ß√£o Estat√≠stica")
        
        for kpi in kpis:
            if resultados[kpi]:
                st.markdown(f"#### {kpi}")
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # Gr√°fico com previs√µes
                    fig = criar_grafico_projecao(
                        meses_historico=meses,
                        valores_historico=df[kpi].tolist(),
                        meses_previsao=previsao_meses,
                        valores_previsao=resultados[kpi]['previsao'].tolist(),
                        valores_otimista=resultados[kpi]['otimista'].tolist(),
                        valores_conservador=resultados[kpi]['conservador'].tolist(),
                        title=f"Previs√£o: {kpi}",
                        height=400
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # M√©tricas de qualidade
                    st.markdown("**M√©tricas de Qualidade**")
                    metricas = resultados[kpi]['metricas']
                    
                    # Avalia√ß√£o
                    avaliacao = avaliar_qualidade_previsao(
                        metricas['R¬≤'],
                        metricas['MAPE']
                    )
                    
                    st.metric(
                        "R¬≤ (Ajuste do Modelo)",
                        f"{metricas['R¬≤']:.3f}",
                        f"{avaliacao['r2']['emoji']} {avaliacao['r2']['status']}"
                    )
                    
                    st.metric(
                        "MAPE (Erro %)",
                        f"{metricas['MAPE']:.1f}%",
                        f"{avaliacao['mape']['emoji']} {avaliacao['mape']['status']}"
                    )
                    
                    # Tend√™ncia
                    tend = interpretar_tendencia(
                        metricas['Tend√™ncia (tau)'],
                        metricas['P-valor tend√™ncia']
                    )
                    
                    st.metric(
                        "Tend√™ncia",
                        f"{metricas['Tend√™ncia (tau)']:.3f}",
                        f"{tend['emoji']} {tend['direcao']}"
                    )
                
                st.markdown("---")
        
        # An√°lise de correla√ß√£o
        st.markdown("### An√°lise de Correla√ß√£o entre KPIs")
        corr_matrix = df[kpis].corr()
        
        fig_corr = px.imshow(
            corr_matrix,
            labels=dict(color="Correla√ß√£o"),
            color_continuous_scale="RdBu",
            aspect="auto"
        )
        fig_corr.update_layout(
            title="Matriz de Correla√ß√£o",
            height=500
        )
        st.plotly_chart(fig_corr, use_container_width=True)
        
        # Insights
        st.markdown("### Insights das An√°lises")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **Qualidade das Previs√µes:**
            - Modelos com R¬≤ > 0.8 s√£o altamente confi√°veis
            - MAPE < 10% indica previs√µes precisas
            - Tend√™ncias significativas sugerem padr√µes consistentes
            
            **Recomenda√ß√µes para Uso:**
            1. Priorize KPIs com maior R¬≤ e menor MAPE
            2. Use intervalos de confian√ßa para planejamento
            3. Considere tend√™ncias significativas nas decis√µes
            """)
        
        with col2:
            st.markdown("""
            **Limita√ß√µes do Modelo:**
            - Assume tend√™ncia linear
            - Sens√≠vel a mudan√ßas bruscas
            - Requer monitoramento cont√≠nuo
            
            **Pr√≥ximos Passos:**
            1. Atualizar dados mensalmente
            2. Validar previs√µes vs. realizado
            3. Ajustar modelos conforme necess√°rio
            """)
    
    except Exception as e:
        st.error(f"""
        ‚ùå Erro ao gerar previs√µes e an√°lises estat√≠sticas.
        
        Erro: {str(e)}
        
        Verifique:
        1. Formato dos dados
        2. Quantidade de dados hist√≥ricos
        3. Depend√™ncias instaladas
        """)